rf = randomForest( Data_Cleaned_Train[,predictionMatrix_Diff],
y = Data_Cleaned_Train[,c("Actual")], ntree=50, type='regression')
RFPred = predict( rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
Data_Cleaned_Test
RFPred = predict( rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
Data_Cleaned_Train
Data_Cleaned_Train[1,]
Data_Cleaned_Test[1,]
Data_Cleaned_Test[,predictionMatrix_Diff]
Data_Cleaned_Train[,predictionMatrix_Diff]
Data_Cleaned_Test
predict( rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
try(){
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}
try(predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response")))
try({
predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response"))
})
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
Data_Cleaned_Test[,predictionMatrix_Diff]
Data_Cleaned_Test[,predictionMatrix_Diff]$FGAOpp = 2
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, error = function(error_condition) {
next
}, finally={
next
})
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
next
}, {
next
})
v =  tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
return(0)
})
v
v =  tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
return(0)
})
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
v = 0
})
try({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
v = 0
})
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
v = 0
})
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
},
return(0)
)
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
},
return(0)
)
la = function(x){
r = tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
},
return(0)
)
}
la
la = function(x){
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
},
return(0)
)
}
la = function(x){
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
}, {
},
return(0)
)
}
la
la()
la()
la() == 0
Results = data.frame(RFPred = numeric(), Team = factor(), Actual = numeric(),Opp = factor(),
simpleProjection = numeric(), Opp = numeric(), GameDate = factor(),
OppRFPred = numeric(), OppActual = numeric())
DateCheck = Sys.Date()
allTeams = subset(DefensiveStatsNCAA, DefensiveStatsNCAA$Date == as.Date(DateCheck))
allTeams = unique(allTeams$Tm)
for (team in allTeams) {
print(team)
Data_Cleaned_Test = subset(CombinedStats, as.Date(CombinedStats$Date) == as.Date(DateCheck)
& CombinedStats$Tm == as.character(team))
Data_Cleaned_Train = subset(CombinedStats, as.Date(CombinedStats$Date) < as.Date(DateCheck)
& CombinedStats$Tm == as.character(team)
& as.Date(CombinedStats$Date) > (as.Date(DateCheck) - 300) )
Opponent = subset(AllDataNCAA, AllDataNCAA$School == as.character(team)
& as.Date(AllDataNCAA$Date) == as.Date(DateCheck))$Opponent
Opponent = unique(Opponent)
currentGame = subset(GameTotals, GameTotals$Tm == team &
as.Date(GameTotals$GameDate) == as.Date(DateCheck)) # Current game
if(nrow(Data_Cleaned_Train) < 2){
next
}
Data_Cleaned_Train = Data_Cleaned_Train[order(Data_Cleaned_Train$Date , decreasing = TRUE ),]
if(nrow(Data_Cleaned_Train) > 50){
Data_Cleaned_Train = Data_Cleaned_Train[0:50,]
}
if (nrow(Data_Cleaned_Train) == 0 | nrow(Data_Cleaned_Test) == 0 | length(Data_Cleaned_Train$Date > as.Date('2019-08-11')) == 0){
next;
}
rf = randomForest( Data_Cleaned_Train[,predictionMatrix_Diff],
y = Data_Cleaned_Train[,c("Actual")], ntree=50, type='regression')
la = function(x){
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
return(1)
},
return(0)
)
}
if(la() == 0){
next
}
Prediction2 = as.data.frame(RFPred)
Prediction2["simpleProjection"] = Data_Cleaned_Test$FG*2 + Data_Cleaned_Test$ThreeP*3 + Data_Cleaned_Test$FT
Prediction2["position"] = Data_Cleaned_Test$PlayerPosition
Prediction2["Team"] = Data_Cleaned_Test$Tm
Prediction2["Actual"] = 0
Prediction2["Opp"] = Opponent
Prediction2["GameDate"] = DateCheck
Prediction2$OppActual = 0
Prediction2$OppRFPred = 0
Results = rbind(Results, Prediction2)
}
View(Results)
print(team)
Data_Cleaned_Test = subset(CombinedStats, as.Date(CombinedStats$Date) == as.Date(DateCheck)
& CombinedStats$Tm == as.character(team))
Data_Cleaned_Train = subset(CombinedStats, as.Date(CombinedStats$Date) < as.Date(DateCheck)
& CombinedStats$Tm == as.character(team)
& as.Date(CombinedStats$Date) > (as.Date(DateCheck) - 300) )
Opponent = subset(AllDataNCAA, AllDataNCAA$School == as.character(team)
& as.Date(AllDataNCAA$Date) == as.Date(DateCheck))$Opponent
Opponent = unique(Opponent)
currentGame = subset(GameTotals, GameTotals$Tm == team &
as.Date(GameTotals$GameDate) == as.Date(DateCheck)) # Current game
if(nrow(Data_Cleaned_Train) < 2){
next
}
Data_Cleaned_Train = Data_Cleaned_Train[order(Data_Cleaned_Train$Date , decreasing = TRUE ),]
if(nrow(Data_Cleaned_Train) > 50){
Data_Cleaned_Train = Data_Cleaned_Train[0:50,]
}
if (nrow(Data_Cleaned_Train) == 0 | nrow(Data_Cleaned_Test) == 0 | length(Data_Cleaned_Train$Date > as.Date('2019-08-11')) == 0){
next;
}
rf = randomForest( Data_Cleaned_Train[,predictionMatrix_Diff],
y = Data_Cleaned_Train[,c("Actual")], ntree=50, type='regression')
rf
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
if(la() == 0){
next
}
la()
la = function(x){
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
return(1)
},
return(0)
)
}
la()
la = function(x){
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
return(1)
},{
return(0)
}
)
}
if(la() == 0){
next
}
la()
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
return(1)
},{
return(0)
}
)
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
return(1)
x = tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
return(1)
},{
return(0)
}
)
la = function(x){
x = tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
return(1)
},{
return(0)
}
)
}
la()
la = function(x){
x = tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
return(1)
},{
return(0)
}
)
return(0)
}
if(la() == 0){
next
}
la = function(x){
x = tryCatch({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
},{
return(0)
}
)
}
la()
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
la = function(x){
x = try({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
},{
return(0)
}
)
}
la()
la() == 0
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
Results = data.frame(RFPred = numeric(), Team = factor(), Actual = numeric(),Opp = factor(),
simpleProjection = numeric(), Opp = numeric(), GameDate = factor(),
OppRFPred = numeric(), OppActual = numeric())
DateCheck = Sys.Date()
allTeams = subset(DefensiveStatsNCAA, DefensiveStatsNCAA$Date == as.Date(DateCheck))
allTeams = unique(allTeams$Tm)
for (team in allTeams) {
print(team)
Data_Cleaned_Test = subset(CombinedStats, as.Date(CombinedStats$Date) == as.Date(DateCheck)
& CombinedStats$Tm == as.character(team))
Data_Cleaned_Train = subset(CombinedStats, as.Date(CombinedStats$Date) < as.Date(DateCheck)
& CombinedStats$Tm == as.character(team)
& as.Date(CombinedStats$Date) > (as.Date(DateCheck) - 300) )
Opponent = subset(AllDataNCAA, AllDataNCAA$School == as.character(team)
& as.Date(AllDataNCAA$Date) == as.Date(DateCheck))$Opponent
Opponent = unique(Opponent)
currentGame = subset(GameTotals, GameTotals$Tm == team &
as.Date(GameTotals$GameDate) == as.Date(DateCheck)) # Current game
if(nrow(Data_Cleaned_Train) < 2){
next
}
Data_Cleaned_Train = Data_Cleaned_Train[order(Data_Cleaned_Train$Date , decreasing = TRUE ),]
if(nrow(Data_Cleaned_Train) > 50){
Data_Cleaned_Train = Data_Cleaned_Train[0:50,]
}
if (nrow(Data_Cleaned_Train) == 0 | nrow(Data_Cleaned_Test) == 0 | length(Data_Cleaned_Train$Date > as.Date('2019-08-11')) == 0){
next;
}
rf = randomForest( Data_Cleaned_Train[,predictionMatrix_Diff],
y = Data_Cleaned_Train[,c("Actual")], ntree=50, type='regression')
la = function(x){
x = try({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
},{
return(0)
}
)
}
if(la() == 0){
next
}
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
Prediction2 = as.data.frame(RFPred)
Prediction2["simpleProjection"] = Data_Cleaned_Test$FG*2 + Data_Cleaned_Test$ThreeP*3 + Data_Cleaned_Test$FT
Prediction2["position"] = Data_Cleaned_Test$PlayerPosition
Prediction2["Team"] = Data_Cleaned_Test$Tm
Prediction2["Actual"] = 0
Prediction2["Opp"] = Opponent
Prediction2["GameDate"] = DateCheck
Prediction2$OppActual = 0
Prediction2$OppRFPred = 0
Results = rbind(Results, Prediction2)
}
for (team in allTeams) {
pl = subset(Results, Results$Opp == as.character(team) & as.Date(Results$GameDate) == as.Date(DateCheck))
if(nrow(pl) == 0){
next
}
Results[Results$Team == as.character(team),]$OppRFPred = pl$RFPred
Results[Results$Team == as.character(team),]$OppActual = pl$Actual
}
dbWriteTable(con, name = "NCAA_DK_GamePrediction", value = data.frame(Results),
row.names = FALSE, append = TRUE)
View(Results)
team
team = "tcu"
pl = subset(Results, Results$Opp == as.character(team) & as.Date(Results$GameDate) == as.Date(DateCheck))
Results$Opp == as.character(team)
Results$Opp
Opponent
subset(CombinedStats, CombinedStats$Tm == as.character(team)
& as.Date(CombinedStats$Date) == as.Date(DateCheck))
& as.Date(CombinedStats$Date) == as.Date(DateCheck))$Opp
Opponent = subset(CombinedStats, CombinedStats$Tm == as.character(team)
& as.Date(CombinedStats$Date) == as.Date(DateCheck))$Opp
Opponent
currentGame = subset(GameTotals, GameTotals$Tm == team &
as.Date(GameTotals$GameDate) == as.Date(DateCheck)) # Current game
& as.Date(CombinedStats$Date) == as.Date(DateCheck))$Opp
Opponent = unique(Opponent)
currentGame = subset(GameTotals, GameTotals$Tm == team &
as.Date(GameTotals$GameDate) == as.Date(DateCheck)) # Current game
predictionMatrix_Diff =c("FG","FGA","FGper","TwoP","TwoPper","ThreeP","ThreePA","ThreePper",
"FT","FTA","FTper","ORB","DRB","TRB","AST","STL","BLK","TOV",
"PF","GmSc","plusMinus","FGAOpp","ThreePAOpp","FTAOpp","TRBOpp",
"ASTOpp","STLOpp","BLKOpp","TOVOpp", "Points", "Wins", "Loss", "WinD","LossD")
Results = data.frame(RFPred = numeric(), Team = factor(), Actual = numeric(),Opp = factor(),
simpleProjection = numeric(), Opp = numeric(), GameDate = factor(),
OppRFPred = numeric(), OppActual = numeric())
DateCheck = Sys.Date()
allTeams = subset(DefensiveStatsNCAA, DefensiveStatsNCAA$Date == as.Date(DateCheck))
allTeams = unique(allTeams$Tm)
for (team in allTeams) {
print(team)
Data_Cleaned_Test = subset(CombinedStats, as.Date(CombinedStats$Date) == as.Date(DateCheck)
& CombinedStats$Tm == as.character(team))
Data_Cleaned_Train = subset(CombinedStats, as.Date(CombinedStats$Date) < as.Date(DateCheck)
& CombinedStats$Tm == as.character(team)
& as.Date(CombinedStats$Date) > (as.Date(DateCheck) - 300) )
Opponent = subset(CombinedStats, CombinedStats$Tm == as.character(team)
& as.Date(CombinedStats$Date) == as.Date(DateCheck))$Opp
Opponent = unique(Opponent)
currentGame = subset(GameTotals, GameTotals$Tm == team &
as.Date(GameTotals$GameDate) == as.Date(DateCheck)) # Current game
if(nrow(Data_Cleaned_Train) < 2){
next
}
Data_Cleaned_Train = Data_Cleaned_Train[order(Data_Cleaned_Train$Date , decreasing = TRUE ),]
if(nrow(Data_Cleaned_Train) > 50){
Data_Cleaned_Train = Data_Cleaned_Train[0:50,]
}
if (nrow(Data_Cleaned_Train) == 0 | nrow(Data_Cleaned_Test) == 0 | length(Data_Cleaned_Train$Date > as.Date('2019-08-11')) == 0){
next;
}
rf = randomForest( Data_Cleaned_Train[,predictionMatrix_Diff],
y = Data_Cleaned_Train[,c("Actual")], ntree=50, type='regression')
la = function(x){
x = try({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
},{
return(0)
}
)
}
if(la() == 0){
next
}
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
Prediction2 = as.data.frame(RFPred)
Prediction2["simpleProjection"] = Data_Cleaned_Test$FG*2 + Data_Cleaned_Test$ThreeP*3 + Data_Cleaned_Test$FT
Prediction2["position"] = Data_Cleaned_Test$PlayerPosition
Prediction2["Team"] = Data_Cleaned_Test$Tm
Prediction2["Actual"] = 0
Prediction2["Opp"] = Opponent
Prediction2["GameDate"] = DateCheck
Prediction2$OppActual = 0
Prediction2$OppRFPred = 0
Results = rbind(Results, Prediction2)
}
for (team in allTeams) {
pl = subset(Results, Results$Opp == as.character(team) & as.Date(Results$GameDate) == as.Date(DateCheck))
if(nrow(pl) == 0){
next
}
Results[Results$Team == as.character(team),]$OppRFPred = pl$RFPred
Results[Results$Team == as.character(team),]$OppActual = pl$Actual
}
pl = subset(Results, Results$Opp == as.character(team) & as.Date(Results$GameDate) == as.Date(DateCheck))
pl
if(nrow(pl) == 0){
next
}
Results[Results$Team == as.character(team),]$OppRFPred = pl$RFPred
pl
Results
Results[Results$Team == as.character(team),]$OppRFPred
Results[Results$Team == as.character(team),]
Results$Team
Results = data.frame(RFPred = numeric(), Team = factor(), Actual = numeric(),Opp = factor(),
simpleProjection = numeric(), Opp = numeric(), GameDate = factor(),
OppRFPred = numeric(), OppActual = numeric())
DateCheck = Sys.Date()
allTeams = subset(DefensiveStatsNCAA, DefensiveStatsNCAA$Date == as.Date(DateCheck))
allTeams = unique(allTeams$Tm)
for (team in allTeams) {
print(team)
Data_Cleaned_Test = subset(CombinedStats, as.Date(CombinedStats$Date) == as.Date(DateCheck)
& CombinedStats$Tm == as.character(team))
Data_Cleaned_Train = subset(CombinedStats, as.Date(CombinedStats$Date) < as.Date(DateCheck)
& CombinedStats$Tm == as.character(team)
& as.Date(CombinedStats$Date) > (as.Date(DateCheck) - 300) )
Opponent = subset(CombinedStats, CombinedStats$Tm == as.character(team)
& as.Date(CombinedStats$Date) == as.Date(DateCheck))$Opp
Opponent = unique(Opponent)
currentGame = subset(GameTotals, GameTotals$Tm == team &
as.Date(GameTotals$GameDate) == as.Date(DateCheck)) # Current game
if(nrow(Data_Cleaned_Train) < 2){
next
}
Data_Cleaned_Train = Data_Cleaned_Train[order(Data_Cleaned_Train$Date , decreasing = TRUE ),]
if(nrow(Data_Cleaned_Train) > 50){
Data_Cleaned_Train = Data_Cleaned_Train[0:50,]
}
if (nrow(Data_Cleaned_Train) == 0 | nrow(Data_Cleaned_Test) == 0 | length(Data_Cleaned_Train$Date > as.Date('2019-08-11')) == 0){
next;
}
rf = randomForest( Data_Cleaned_Train[,predictionMatrix_Diff],
y = Data_Cleaned_Train[,c("Actual")], ntree=50, type='regression')
la = function(x){
x = try({
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
},{
return(0)
}
)
}
if(la() == 0){
next
}
RFPred = predict(rf,  Data_Cleaned_Test[,predictionMatrix_Diff] ,type = c("response") )
Prediction2 = as.data.frame(RFPred)
Prediction2["simpleProjection"] = Data_Cleaned_Test$FG*2 + Data_Cleaned_Test$ThreeP*3 + Data_Cleaned_Test$FT
Prediction2["position"] = Data_Cleaned_Test$PlayerPosition
Prediction2["Team"] = Data_Cleaned_Test$Tm
Prediction2["Actual"] = 0
Prediction2["Opp"] = Opponent
Prediction2["GameDate"] = DateCheck
Prediction2$OppActual = 0
Prediction2$OppRFPred = 0
Results = rbind(Results, Prediction2)
}
for (team in allTeams) {
pl = subset(Results, Results$Opp == as.character(team) & as.Date(Results$GameDate) == as.Date(DateCheck))
if(nrow(pl) == 0){
next
}
Results[Results$Team == as.character(team),]$OppRFPred = pl$RFPred
Results[Results$Team == as.character(team),]$OppActual = pl$Actual
}
Results[Results$Team == as.character(team),]
if(nrow(pl) == 0 | nrow(Results[Results$Team == as.character(team),])){
next
}
for (team in allTeams) {
pl = subset(Results, Results$Opp == as.character(team) & as.Date(Results$GameDate) == as.Date(DateCheck))
if(nrow(pl) == 0 | nrow(Results[Results$Team == as.character(team),])){
next
}
Results[Results$Team == as.character(team),]$OppRFPred = pl$RFPred
Results[Results$Team == as.character(team),]$OppActual = pl$Actual
}
Results[Results$Team == as.character(team),]
team
nrow( Results[Results$Team == as.character(team),])
for (team in allTeams) {
pl = subset(Results, Results$Opp == as.character(team) & as.Date(Results$GameDate) == as.Date(DateCheck))
if(nrow(pl) == 0 | nrow(Results[Results$Team == as.character(team),]) == 0){
next
}
Results[Results$Team == as.character(team),]$OppRFPred = pl$RFPred
Results[Results$Team == as.character(team),]$OppActual = pl$Actual
}
