#pragma checksum "D:\DFS Website\DFS\DFS\Views\NBA\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "888c0a2ab820c127d8b0323a94dc9d3980545dd4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_NBA_Index), @"mvc.1.0.view", @"/Views/NBA/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/NBA/Index.cshtml", typeof(AspNetCore.Views_NBA_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\DFS Website\DFS\DFS\Views\_ViewImports.cshtml"
using DFS;

#line default
#line hidden
#line 2 "D:\DFS Website\DFS\DFS\Views\_ViewImports.cshtml"
using DFS.Models;

#line default
#line hidden
#line 1 "D:\DFS Website\DFS\DFS\Views\NBA\Index.cshtml"
using DFS.UI.Common;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"888c0a2ab820c127d8b0323a94dc9d3980545dd4", @"/Views/NBA/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b389b029d588de670fa900657428202fd15f9a9c", @"/Views/_ViewImports.cshtml")]
    public class Views_NBA_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DFS.UI.Models.NBAPlayerViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(64, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "D:\DFS Website\DFS\DFS\Views\NBA\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
            BeginContext(107, 6152, true);
            WriteLiteral(@"
<div class=""card no-border col-md-12"">
    <div class=""card-header"">
        Games Today
    </div>
    <div class=""card-body form-group row col-md-12"">
        <div class=""row col-md-12"">
            <div class=""col-md-12"">
                <label class=""col-md-4"">
                    Game Date
                </label>
                <input type=""text"" id=""datepicker"" />
                <span class=""fa fa-calendar-alt fa-cal""></span>
            </div>
        </div>
    </div>
    <div class=""col-md-12 gamepicker"" id=""gamesList"">
        <h6 class=""text-left"">Filter Teams</h6>
        <div class=""cardAll pull-left"">
            <button class=""btn-primary"">
                All
                <i class=""fas fa-check""></i>
            </button>
        </div>
    </div>
</div>
<div class=""card no-border col-md-12"">
    <div class=""row"">
        <div class=""card-header"">
            Player Stats
        </div>
        <div class=""contianer col-md-12"">
            <div class=""car");
            WriteLiteral(@"d-body"">
                <table id=""jqGrid""></table>
            </div>
        </div>
    </div>
</div>

<script>
    $(function () {
        var date = $(""#datepicker"");
        var gamesList = $(""#gamesList"");        

        date.datepicker();
        $("".fa-cal"").on(""click"", function () {
            date.datepicker(""show"");
        })

        date.change(function (e) {
            params = {}
            params.date = $(this).val()

            $.ajax({
                url: ""/NBA/GetGamesForDate"",
                type: ""POST"",
                data: params,
                success: function (data) {
                    PopulateGames(JSON.parse(data));
                },
                error: function () {
                }
            });

        });

        function PopulateGames(data) {
            gamesList.find('.card').remove()
            $.each(data, function (i, value) {
                gamesList.append($(""<div class='card'><button class='TeamName'>"" + va");
            WriteLiteral(@"lue.HomeTeam + ""</button><button class='TeamName'>"" + value.AwayTeam + ""</button>""));
            });
        };

        gamesList.on(""click"", '.TeamName', function (e) {
            console.log($(this).text);
            params = {};
            params.date = date.val();
            params.team = $(this).text();
            params.opp = $(this).parent().text().replace($(this).text(), """");           

            $.ajax({
                url: ""/NBA/GetGameStatsByDate"",
                type: ""POST"",
                data: params,
                success: function (data) {
                    console.log(data);
                },
                error: function () {

                }
            });
        });


        var tabulate = function (data, columns) {
            console.log(data);
            $(""#jqGrid"").clearGridData();

            $(""#jqGrid"").jqGrid('setGridParam', { data: data });
            $(""#jqGrid"").trigger(""reloadGrid"");

            var Columnmodel = [");
            WriteLiteral(@"
                { name: 'Name', index: 'Name', width: 400, align: 'center', editable: false },
                { name: 'Team', index: 'Team', width: 100, align: 'center', editable: false },
                { name: 'PlayerPosition', index: 'PlayerPosition', width: 300, align: 'center', editable: false },
                { name: 'Height', index: 'Height', width: 100, align: 'center', editable: false },
                { name: 'Weight', index: 'Weight', width: 100, align: 'center', editable: false },
                { name: 'MinutesPlayed', index: 'MinutesPlayed', width: 100, align: 'center', editable: false },
                { name: 'FieldGoal', index: 'FieldGoal', width: 20, align: 'center', editable: false },
                { name: 'FieldGoalAttempted', index: 'FieldGoalAttempted', width: 20, align: 'center', editable: false },
                { name: 'Usage', index: 'Usage', width: 50, align: 'center', editable: false },
                { name: 'ThreePointer', index: 'ThreePointer', width: 50, al");
            WriteLiteral(@"ign: 'center', editable: false },
                { name: 'ThreePointerAttempted', index: 'ThreePointerAttempted', width: 50, align: 'center', editable: false },
                { name: 'DefensiveRating', index: 'DefensiveRating', width: 50, align: 'center', editable: false },
                { name: 'OffensiveRating', index: 'OffensiveRating', width: 50, align: 'center', editable: false },
                { name: 'FreeThrow', index: 'FreeThrow', width: 50, align: 'center', editable: false },
                { name: 'OffensiveRebound', index: 'OffensiveRebound', width: 50, align: 'center', editable: false },
                { name: 'DefensiveRebound', index: 'DefensiveRebound', width: 50, align: 'center', editable: false },
                { name: 'TotalRebound', index: 'TotalRebound', width: 50, align: 'center', editable: false },
                { name: 'TotalReboundPercentage', index: 'TotalReboundPercentage', width: 50, align: 'center', editable: false },
                { name: 'Assists', index:");
            WriteLiteral(@" 'Assists', width: 50, align: 'center', editable: false },
                { name: 'Steals', index: 'Steals', width: 50, align: 'center', editable: false },
                { name: 'Blocks', index: 'Blocks', width: 50, align: 'center', editable: false },
                { name: 'Turnovers', index: 'Turnovers', width: 50, align: 'center', editable: false },
                { name: 'Fouls', index: 'Fouls', width: 50, align: 'center', editable: false },
                { name: 'Points', index: 'Points', width: 50, align: 'center', editable: false }
            ];

            $(""#jqGrid"").jqGrid({
                colModel: Columnmodel,
                pager: '#grdEmail',
                datatype: ""jsonstring"",
                datastr: data,
                jsonReader: { repeatitems: false },
                rowNum: 25,
                subGrid: false,
                viewrecords: true,
                height: ""auto"",
                ignoreCase: true
            });
        };


    });
</s");
            WriteLiteral("cript>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DFS.UI.Models.NBAPlayerViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
