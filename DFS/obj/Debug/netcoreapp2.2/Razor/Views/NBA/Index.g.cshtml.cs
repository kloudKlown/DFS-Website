#pragma checksum "D:\DFS Website\DFS\DFS\Views\NBA\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ca31257b3a00e69c8fbca71cd5ab28af37efea1d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_NBA_Index), @"mvc.1.0.view", @"/Views/NBA/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/NBA/Index.cshtml", typeof(AspNetCore.Views_NBA_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\DFS Website\DFS\DFS\Views\_ViewImports.cshtml"
using DFS;

#line default
#line hidden
#line 2 "D:\DFS Website\DFS\DFS\Views\_ViewImports.cshtml"
using DFS.Models;

#line default
#line hidden
#line 1 "D:\DFS Website\DFS\DFS\Views\NBA\Index.cshtml"
using DFS.UI.Common;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ca31257b3a00e69c8fbca71cd5ab28af37efea1d", @"/Views/NBA/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b389b029d588de670fa900657428202fd15f9a9c", @"/Views/_ViewImports.cshtml")]
    public class Views_NBA_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DFS.UI.Models.NBAPlayerViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "_NBACourtPartial", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(64, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "D:\DFS Website\DFS\DFS\Views\NBA\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
            BeginContext(107, 814, true);
            WriteLiteral(@"
<div class=""card no-border col-md-12"">
    <div class=""card-header"">
        Games Today
    </div>
    <div class=""card-body form-group row col-md-12"">
        <div class=""row col-md-12"">
            <div class=""col-md-12"">
                <label class=""col-md-4"">
                    Game Date
                </label>
                <input type=""text"" id=""datepicker"" />
                <span class=""fa fa-calendar-alt fa-cal""></span>
            </div>
        </div>
    </div>
    <div class=""col-md-12 gamepicker"" id=""gamesList"">
        <h6 class=""text-left"">Filter Teams</h6>
        <div class=""cardAll pull-left"">
            <button class=""btn-primary"">
                All
                <i class=""fas fa-check""></i>
            </button>
        </div>
    </div>
</div>
");
            EndContext();
            BeginContext(921, 35, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ca31257b3a00e69c8fbca71cd5ab28af37efea1d4567", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(956, 8623, true);
            WriteLiteral(@"
<div class=""card no-border col-md-12"">
    <div class=""row"">
        <div class=""card-header"">
            Player Stats
        </div>
        <div class=""contianer col-md-12"">
            <div class=""card-body"">
                <table id=""jqGrid""></table>
            </div>
        </div>
    </div>
</div>

<script>
    $(function () {
        var date = $(""#datepicker"");
        var gamesList = $(""#gamesList"");
        var court = $(""#NBACourt"");
        var team1Inactive = $(""#T1_InactiveList"")
        var team2Inactive = $(""#T2_InactiveList"")
        var nbaPositions = {}

        date.datepicker();
        $("".fa-cal"").on(""click"", function () {
            date.datepicker(""show"");
        })

        date.change(function (e) {
            params = {}
            params.date = $(this).val()

            $.ajax({
                url: ""/NBA/GetGamesForDate"",
                type: ""POST"",
                data: params,
                success: function (data) {
          ");
            WriteLiteral(@"          PopulateGames(JSON.parse(data));
                },
                error: function () {
                }
            });

        });

        function PopulateGames(data) {
            gamesList.find('.card').remove();
            $.each(data, function (i, value) {
                gamesList.append($(""<div class='card'><button class='TeamName'>"" + value.HomeTeam + ""</button><button class='TeamName'>"" + value.AwayTeam + ""</button>""));
            });
        };

        gamesList.on(""click"", '.TeamName', function (e) {
            console.log($(this).text);
            params = {};
            params.date = date.val();
            params.team = $(this).text();
            params.opp = $(this).parent().text().replace($(this).text(), """");

            $.ajax({
                url: ""/NBA/GetGameStatsByDate"",
                type: ""POST"",
                data: params,
                success: function (data) {                    
                    clearChartDetials();
    ");
            WriteLiteral(@"                tabulate(data.activePlayerList);
                    fillChartDetails(data.activePlayerList);
                    fillInactivePlayers(data.inactivePlayersList, params.team);
                },
                error: function () {

                }
            });
        });


        var tabulate = function (data) {
            console.log(data);
            $(""#jqGrid"").clearGridData();

            $(""#jqGrid"").jqGrid('setGridParam', { data: data });
            $(""#jqGrid"").trigger(""reloadGrid"");

            var Columnmodel = [
                { name: 'name', index: 'Name', width: 150, align: 'center', editable: false },
                { name: 'team', index: 'Team', width: 50, align: 'center', editable: false },
                { name: 'multiPosition', index: 'MultiPosition', width: 50, align: 'center', editable: false },
                { name: 'height', index: 'Height', width: 100, align: 'center', editable: false },
                { name: 'weight', index: 'Wei");
            WriteLiteral(@"ght', width: 100, align: 'center', editable: false },
                { name: 'minutesPlayed', index: 'MinutesPlayed', width: 100, align: 'center', editable: false },
                { name: 'fieldGoal', index: 'FieldGoal', width: 20, align: 'center', editable: false },
                { name: 'fieldGoalAttempted', index: 'FieldGoalAttempted', width: 20, align: 'center', editable: false },
                { name: 'usage', index: 'Usage', width: 50, align: 'center', editable: false },
                { name: 'threePointer', index: 'ThreePointer', width: 50, align: 'center', editable: false },
                { name: 'threePointerAttempted', index: 'ThreePointerAttempted', width: 50, align: 'center', editable: false },
                { name: 'defensiveRating', index: 'DefensiveRating', width: 50, align: 'center', editable: false },
                { name: 'offensiveRating', index: 'OffensiveRating', width: 50, align: 'center', editable: false },
                { name: 'freeThrow', index: 'FreeThrow',");
            WriteLiteral(@" width: 50, align: 'center', editable: false },
                { name: 'offensiveRebound', index: 'OffensiveRebound', width: 50, align: 'center', editable: false },
                { name: 'defensiveRebound', index: 'DefensiveRebound', width: 50, align: 'center', editable: false },
                { name: 'totalRebound', index: 'TotalRebound', width: 50, align: 'center', editable: false },
                { name: 'totalReboundPercentage', index: 'TotalReboundPercentage', width: 50, align: 'center', editable: false },
                { name: 'assists', index: 'Assists', width: 50, align: 'center', editable: false },
                { name: 'steals', index: 'Steals', width: 50, align: 'center', editable: false },
                { name: 'blocks', index: 'Blocks', width: 50, align: 'center', editable: false },
                { name: 'turnovers', index: 'Turnovers', width: 50, align: 'center', editable: false },
                { name: 'fouls', index: 'Fouls', width: 50, align: 'center', editable: fals");
            WriteLiteral(@"e },
                { name: 'points', index: 'Points', width: 50, align: 'center', editable: false }
            ];

            $(""#jqGrid"").jqGrid({
                colModel: Columnmodel,
                pager: '#grdEmail',
                datatype: ""jsonstring"",
                datastr: data,
                jsonReader: { repeatitems: false },
                rowNum: 25,
                subGrid: false,
                viewrecords: true,
                height: ""auto"",
                ignoreCase: true
            });
        };


        var fillChartDetails = function (data) {
            var primaryTeam = data[0].team;
            var id = 1;
            nbaPositions = {};

            $.each(data, function (i, value) {
                var tableColumns = [""Min"", ""Def"", ""Off"", ""Usa"", ""Eff""]

                if (value.team === primaryTeam) {
                    if (String(nbaPositions[value.position]) === ""undefined"") {
                        nbaPositions[value.position] = val");
            WriteLiteral(@"ue.name;

                        // Set Player Name
                        court.find(""#"" + value.position + ""_"" + String(id) + ""_L"").text(value.name + ""("" + String(value.height) + "")"");

                        // Set values in the court tables
                        $.each(tableColumns, function (t, v) {
                            tableColumns[t] = value.position + ""_"" + String(id) + ""_"" + v;
                        });

                        // Set Player Details
                        court.find(""#"" + tableColumns[0]).text(value.minutesPlayed);
                        court.find(""#"" + tableColumns[1]).text(value.defensiveRating);
                        court.find(""#"" + tableColumns[2]).text(value.offensiveRating);
                        court.find(""#"" + tableColumns[3]).text(value.usage);
                        court.find(""#"" + tableColumns[4]).text(value.points);
                    }

                }
                else {
                    nbaPositions = {};
         ");
            WriteLiteral(@"           id = 2;
                    primaryTeam = value.team;
                }
            });
        };

        fillInactivePlayers = function (data, team) {
            team1Inactive.find(""label"").remove();
            team2Inactive.find(""label"").remove();

            $.each(data, function (i, value) {
                var text = $(""<label>"" + value.name + ""</label>"")
                if (value.team == team) {
                    team1Inactive.append(text);
                }
                else {
                    team2Inactive.append(text);
                }
            });
        }


        var clearChartDetials = function () {
            var tableColumns = [""Min"", ""Def"", ""Off"", ""Usa"", ""Eff""];
            var positions = [""PG"", ""SG"", ""SF"", ""PF"", ""C""];
            var idList = [];

            $.each(tableColumns, function (i, tblV) {
                $.each(positions, function (i, data) {
                    // Player table Reset
                    idList = idList.");
            WriteLiteral(@"concat(""[id^="" + data + ""_1_"" + tblV + ""]"");
                    idList = idList.concat(""[id^="" + data + ""_2_"" + tblV + ""]"");
                    // PlayerName Reset
                    idList = idList.concat(""[id^="" + data + ""_1_L]"");
                    idList = idList.concat(""[id^="" + data + ""_2_L]"");
                });
            });

            court.find(String(idList)).text("""")
        }
    });
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DFS.UI.Models.NBAPlayerViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
